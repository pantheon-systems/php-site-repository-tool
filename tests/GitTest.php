<?php

namespace PhpSiteRepositoryTool;

use PhpSiteRepositoryTool\Utils\Git;
use PhpSiteRepositoryTool\Exceptions\Git\GitMergeConflictException;
use Psr\Log\NullLogger;
use Yoast\PHPUnitPolyfills\TestCases\TestCase;

/**
 * Class GitTest.
 */
class GitTest extends TestCase
{
    use SiteRepositoryToolTesterTrait;

    /**
     * @var \PhpSiteRepositoryTool\Utils\Git
     */
    protected static $git;

    /**
     * @var string
     */
    protected static $upstreamUrl;

    /**
     * Prepare to test our class.
     */
    // phpcs:ignore
    public static function set_up_before_class()
    {
        parent::set_up_before_class();

        $workdir = sys_get_temp_dir() . '/php-site-repository-tool-test-' . uniqid();
        mkdir($workdir);
        self::$git = new Git('', '', $workdir, true, '', '', false);
        $logger = new NullLogger();
        self::$git->setLogger($logger);
        self::$upstreamUrl = 'https://' . getenv('GITHUB_TOKEN') . '@github.com/pantheon-fixtures/php-srt-upstream-fixture.git';
    }

    /**
     * Test clone function.
     *
     * @throws \PhpSiteRepositoryTool\Exceptions\DirNotCreatedException
     * @throws \PhpSiteRepositoryTool\Exceptions\DirNotEmptyException
     * @throws \PhpSiteRepositoryTool\Exceptions\Git\GitException
     * @throws \PhpSiteRepositoryTool\Exceptions\NotEmptyFolderException
     */
    public function testClone()
    {
        self::$git->cloneRepository(self::$upstreamUrl, 'main');
        $this->assertFileExists(self::$git->getWorkdir() . '/.git');
    }

    /**
     * Test adding a remote.
     *
     * @throws \PhpSiteRepositoryTool\Exceptions\Git\GitException
     * @throws \ReflectionException
     */
    public function testRemoteAdd()
    {
        self::$git->remoteAdd('upstream', self::$upstreamUrl);
        $output = $this->callMethod(self::$git, 'execute', [['remote', 'show', 'upstream']]);
        $this->assertStringContainsString('Fetch URL: ' . self::$upstreamUrl, $output);
    }

    /**
     * Test fetching a remote.
     *
     * @throws \PhpSiteRepositoryTool\Exceptions\Git\GitException
     */
    public function testFetch()
    {
        $output = self::$git->fetch('upstream');
        $this->assertEmpty($output);
    }

    /**
     * Test merging a branch.
     *
     * @throws \PhpSiteRepositoryTool\Exceptions\Git\GitException
     * @throws \PhpSiteRepositoryTool\Exceptions\Git\GitMergeConflictException
     */
    public function testCleanMerge()
    {
        $output = self::$git->merge('clean-merge', 'upstream');
        $this->assertEmpty($output);
    }

    /**
     * Test merging a branch.
     *
     * @throws \PhpSiteRepositoryTool\Exceptions\Git\GitException
     */
    public function testMergeWithConflicts()
    {
        try {
            self::$git->merge('branch-to-merge', 'upstream');
        } catch (GitMergeConflictException $e) {
            $files = self::$git->listUnmergedFiles();
            $this->assertCount(1, $files);
            $this->assertContains('README.md', $files);
        }
    }

    /**
     * Test removing a file.
     *
     * @throws \PhpSiteRepositoryTool\Exceptions\Git\GitException
     */
    public function testRemove()
    {
        $output = self::$git->remove(['README.md']);
        $this->assertStringContainsString("rm 'README.md'", $output);
        self::$git->execute(['reset', '--hard', 'HEAD']);
    }

    /**
     * @test
     *
     * @throws \PhpSiteRepositoryTool\Exceptions\DirNotCreatedException
     * @throws \PhpSiteRepositoryTool\Exceptions\Git\GitException
     */
    public function testIsAnythingToCommit()
    {
        $result = self::$git->isAnythingToCommit();
        $this->assertEquals(false, $result);

        $test_file_path = self::$git->getWorkdir() . DIRECTORY_SEPARATOR . 'phpunit_test_file.txt';
        file_put_contents(
            $test_file_path,
            'A test file generated by GitTest::testIsAnythingToCommit()'
        );
        $result = self::$git->isAnythingToCommit();
        $this->assertEquals(true, $result);
        unlink($test_file_path);
    }

    /**
     * Test getting remote message.
     *
     * @throws \PhpSiteRepositoryTool\Exceptions\Git\GitException
     */
    public function testGetRemoteMessage()
    {
        $message = self::$git->getRemoteMessage('clean-merge');
        $this->assertEquals('Add new commit here.', $message);
    }

    /**
     * @test
     *
     * @throws \PhpSiteRepositoryTool\Exceptions\Git\GitException
     */
    public function testIsLatestChangeMatchesRemote()
    {
        $branch = 'unmerged-changes-in-upstream';

        $paths = ['upstream-configuration/scripts/*'];
        $result = self::$git->isLatestChangeMatchesRemote($paths, 'upstream', $branch);
        $this->assertEquals(true, $result);

        $paths = ['upstream-configuration/scripts/ComposerScripts.php'];
        $result = self::$git->isLatestChangeMatchesRemote($paths, 'upstream', $branch);
        $this->assertEquals(true, $result);

        $paths = ['upstream-configuration/off-switches/file-not-exists.txt'];
        $result = self::$git->isLatestChangeMatchesRemote($paths, 'upstream', $branch);
        $this->assertEquals(true, $result);

        $paths = ['upstream-configuration/off-switches'];
        $result = self::$git->isLatestChangeMatchesRemote($paths, 'upstream', $branch);
        $this->assertEquals(false, $result);

        $paths = ['upstream-configuration/off-switches/*'];
        $result = self::$git->isLatestChangeMatchesRemote($paths, 'upstream', $branch);
        $this->assertEquals(false, $result);

        $paths = ['upstream-configuration/off-switches/001.txt'];
        $result = self::$git->isLatestChangeMatchesRemote($paths, 'upstream', $branch);
        $this->assertEquals(false, $result);

        $paths = ['upstream-configuration/off-switches/001*'];
        $result = self::$git->isLatestChangeMatchesRemote($paths, 'upstream', $branch);
        $this->assertEquals(false, $result);
    }
}
